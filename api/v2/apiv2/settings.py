"""
Django settings for apiv2 project.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).resolve().parent.parent
# print(BASE_DIR.parent)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'skya+@7b2dmz%22t_fjg*lk*(nk*y6o8882-ypt)7myg%1qy-1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'core',
    # 'djangorestframework-simplejwt'
    # 'elasticapm.contrib.django',
    # 'django_elasticsearch_dsl',
]

# ELASTICSEARCH_DSL={
#     'default': {
#         'hosts': 'localhost:9200'
#     },
# }

# ELASTIC_APM = {
# # Set the required service name. Allowed characters:
# # a-z, A-Z, 0-9, -, _, and space
# 'SERVICE_NAME': 'core',
# 'DEBUG': True,
# # Use if APM Server requires a secret token
# 'SECRET_TOKEN': '',

# # Set the custom APM Server URL (default: http://localhost:8200)
# 'SERVER_URL': 'http://localhost:8200',

# # Set the service environment
# 'ENVIRONMENT': 'production',
# }




CORS_ORIGIN_ALLOW_ALL = True

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'elasticapm.contrib.django.middleware.TracingMiddleware'
]

from corsheaders.defaults import default_headers

CORS_ALLOW_HEADERS = list(default_headers) + [
    "Set-Cookie",
    "X-Score-ID",
    # "Set-Test",
    # "Test",
]

CORS_EXPOSE_HEADERS = CORS_ALLOW_HEADERS

CORS_ALLOWED_ORIGINS = [
    "https://domain.com",
"https://api.domain.com",
"http://localhost:8080",
"http://127.0.0.1:3000",
    "http://127.0.0.1:8107",
    "http://127.0.0.1:3000",
    "http://localhost:8107"
]

ROOT_URLCONF = 'apiv2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'static', 'frontend')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTH_USER_MODEL = "core.User"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
     ],
}

from datetime import timedelta

SIMPLE_JWT = {
    # how long the original token is valid for
    'ACCESS_TOKEN_LIFETIME': timedelta(days=2),

    # allow refreshing of tokens
    'JWT_ALLOW_REFRESH': True,

    # this is the maximum time AFTER the token was issued that
    # it can be refreshed.  exprired tokens can't be refreshed.
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
}

WSGI_APPLICATION = 'apiv2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'quizapp',
#         'USER': 'x5ud0kn1gh7x',
#         'PASSWORD': 'Abc@123',
#         'HOST': 'localhost',
#         'PORT': 5432
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

import os

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters':{
        'simple': {
            'format': '{levelname} {asctime} {module} {process:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file':{
            'level':'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
            'formatter':'simple',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'logstash': {
            'level': 'DEBUG',
            'class': 'logstash.TCPLogstashHandler',
            'host': 'localhost',
            'formatter': 'simple',
            'port': 5044, # Default value: 5959
            'version': 1, # Version of logstash event schema. Default value: 0 (for backward compatibility of the library)
            'message_type': 'django',  # 'type' field in logstash message. Default value: 'logstash'.
            'fqdn': False, # Fully qualified domain name. Default value: false.
            'tags': ['django.server'], # list of tags. Default: None.
        },
    },
    'loggers': {
        'django.server': {
            'handlers': ['file'],
            # 'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['file'],
            # 'level': 'DEBUG',
            'propagate': True,
        },
    }
}


# LOGGING ={
#     'version':1,
#     'loggers':{
#         'django':{
#             'handlers':['file'],
#             'level':'DEBUG'
#         },
#         'elasticapm': {
#             'level': 'DEBUG',
#             'handlers': ['elasticapm'],
#             'propagate': False,
#         },
#     },
#     'handlers':{
#         'file':{
#             'level':'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
#             'formatter':'simpleRe',
#         },
#         'elasticapm': {
#             'level': 'DEBUG',
#             'class': 'elasticapm.contrib.django.handlers.LoggingHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
#         }
#     },
#     'formatters':{
#         'simpleRe': {
#             'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
#             'style': '{',
#         }

#     }
# }
